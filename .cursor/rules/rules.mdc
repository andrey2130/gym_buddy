---
alwaysApply: true
description: Engineering and coding standards for GymBuddy in Cursor
globs:
  - "lib/**"
  - "assets/**"
---

Architecture & Structure

	•	Clean Architecture: separate layers clearly: domain, data, presentation.
	•	Domain: business logic (UseCase, Entities).
	•	Data: data sources (Firebase, Firestore, API, local storage) via Repositories and DataSources.
	•	Presentation: UI widgets, screens, state management (Bloc).
	•	Bloc: all state management via flutter_bloc; UI renders state only.
	•	Navigation: use only go_router; avoid direct Navigator calls.

Principles

	•	Follow SOLID strictly.
	•	Apply DRY.
	•	Business logic must not depend on UI.
	•	Use dependency injection with get_it + injectable.
	•	Use freezed + json_serializable for immutable models and serialization.
	•	Use dartz for functional error handling and Either types.
	•	Write unit tests for UseCases and Repositories.

Packages & Usage

	•	firebase_core, firebase_auth, cloud_firestore: authentication and Firestore data sources.
	•	flutter_screenutil: responsive layouts.
	•	phone_text_field, intl_phone_field, pin_code_fields: phone input and verification.
	•	flutter_hooks: hooks for widget state handling when needed.
	•	talker, talker_flutter: centralized logging and error handling.
	•	flutter_svg: scalable vector assets.
	•	swipe_to: swipe gestures where applicable.
	•	visibility_detector: widget visibility tracking for analytics or lazy-loading.

Code Style & Quality

	•	UI must be lightweight; no business logic in widgets.
	•	Create utilities for repeated patterns (validation, formatting, constants).
	•	Keep dependencies explicit and inject wherever possible.
	•	Maintain readability; code should be self-documenting.
	•	Use build_runner for code generation.
